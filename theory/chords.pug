extends layout

block style 
    style. 
        #graph {
            width: 100%;
            height: 10rem;
        }

block body
    div.section CHORDS
        div.subsection
            label Root 
                select#tonics
            label Octave 
                select#octaves
                    option(value=1) 1
                    option(value=2 selected) 2
                    option(value=3) 3
                    option(value=4) 4
                    option(value=5) 5
                    option(value=6) 6
                    option(value=7) 7
            label Wave form 
                select#waveForm
                    option(value='sine') sine
                    option(value='square') square
                    option(value='triangle') triangle
                    option(value='sawtooth' selected) sawtooth
            label duration(s)
                select#duration
                    option(value='0.10') 0.10
                    option(value='0.25') 0.25
                    option(value='0.50') 0.50
                    option(value='0.75') 0.75
                    option(value='1.00') 1.00
                    option(value='2.00') 2.00
                    option(value='4.00' selected) 4.00
            label Show frequencies
                input#showFreq(type='checkbox') 
        div.subsection#buttons     
            label#notes   
    div
        canvas#graph

block script
    script
        include includes/AudioGraph.js
        include includes/AudioTone.js

    script.
        const tone = new AudioTone()

        const NOTES = ['A','A#','B','C','C#','D','D#','E','F','F#','G','G#']
        const CHORDS = {
            'major':                 [0, 4, 3],
            'minor':                 [0, 3, 4],
            'diminished':            [0, 3, 3],
            'augmented':             [0, 4, 4],
            'dominant 7th':          [0, 4, 3, 3],
            'diatonic dominant 7th': [7, 4, 3, 3],
            'major 7th':             [0, 4, 3, 4],
            'minor 7th':             [0, 3, 4, 3],
            'diminished 7th':        [0, 3, 3, 3],
        }

        for (let i = 0; i < NOTES.length; i++) {
            const note = NOTES[i]
            const option = document.createElement('option')
            option.textContent = note
            option.value = i
            tonics.appendChild(option)
        }

        for (const chordName of Object.keys(CHORDS)) {
            const div = document.createElement('div')
            const button = document.createElement('button')
            button.id = chordName
            button.textContent = chordName
            button.onclick = () => { 
                notes.textContent = ''
                div.appendChild(notes)
                playChord(chordName) 
            }
            div.appendChild(button)
            buttons.appendChild(div)
        }

        async function playChord(name) {
            tone.stop()
            const chordSteps = CHORDS[name]
            const tonicIndex = Number(tonics.value)
            const seconds = Number(duration.value)
            let promises = []
            let index = 0
            const graph = new AudioGraph(document.querySelector('#graph'), tone.audioContext)
            for (const steps of chordSteps) {
                index += steps
                promises.push(tone.play(selectFrequency(tonicIndex, index), seconds, waveForm.value, {analyser:graph.analyser}))
            }
            console.log('scale begin', name)
            Promise.all(promises)
                .catch(error => console.log(error.message))
        }

        function selectFrequency(tonicIndex, index) {
            const frequency = tone.semitoneStep(tonicIndex, index, octaves.value)
            notes.textContent += `${NOTES[(tonicIndex + index) % NOTES.length]} `
            if (showFreq.checked)
                notes.textContent += `[${(frequency.toFixed(3))}] `
            return frequency
        }